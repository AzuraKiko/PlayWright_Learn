# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Login Functionality >> login button should be disabled when both email and password are empty
- Location: E:\Playwright\tests\login\Login.spec.js:61:5

# Error details

```
Error: expect(received).toBeTruthy()

Received: false
    at E:\Playwright\tests\login\Login.spec.js:63:57
```

# Test source

```ts
   1 | import { test, expect } from '@playwright/test';
   2 | import { TestData } from '../../lib/constants/TestData';
   3 | import PageFactory from '../../lib/pages/PageFactory';
   4 | import config from '../../config/playwright.config.js';
   5 |
   6 | test.describe('Login Functionality', () => {
   7 |     let loginPage;
   8 |     let pageFactory;
   9 |
   10 |     test.beforeEach(async ({ page },) => {
   11 |         // Access the baseURL directly from the config
   12 |         const baseURL = config.use?.baseURL;
   13 |
   14 |         pageFactory = new PageFactory(page);
   15 |         // Lấy LoginPage từ PageFactory
   16 |         loginPage = pageFactory.getLoginPage();
   17 |         await loginPage.open(baseURL);
   18 |     });
   19 |
   20 |     // Teardown after each test
   21 |     test.afterEach(async ({ page }) => {
   22 |         await page.close();
   23 |     });
   24 |
   25 |     test('should login successfully with valid credentials', async ({ page }) => {
   26 |         await loginPage.login(TestData.Users.ValidUser.email, TestData.Users.ValidUser.password);
   27 |
   28 |         // Kiểm tra đã chuyển hướng đến trang nhập PIN
   29 |         await expect(page.locator('body')).toContainText('Enter Pin Code');
   30 |
   31 |         await loginPage.enterCode(TestData.Users.ValidUser.code);
   32 |
   33 |         await expect(page.locator('body')).toContainText('Dashboard');
   34 |     });
   35 |
   36 |     test('should show error message with invalid credentials', async ({ page }) => {
   37 |         await loginPage.login(TestData.Users.InvalidUser.email, TestData.Users.InvalidUser.password);
   38 |
   39 |         // Kiểm tra toast thông báo lỗi hiển thị
   40 |         expect(await loginPage.isToastDisplayed()).toBeTruthy();
   41 |
   42 |         // Kiểm tra nội dung của toast message
   43 |         expect(await loginPage.isToastMessageCorrect('Error, Incorrect Password or User Login. Please make sure your details are correct and try again')).toBeTruthy();
   44 |
   45 |         await loginPage.dismissToast();
   46 |
   47 |         expect(await loginPage.isToastGone()).toBeTruthy();
   48 |
   49 |         await loginPage.clickLoginButton();
   50 |
   51 |         expect(await loginPage.isToastDisplayed()).toBeTruthy();
   52 |
   53 |         expect(await loginPage.isToastMessageCorrect('Error, You have tried too many times. Please try again later.')).toBeTruthy();
   54 |
   55 |         await loginPage.dismissToast();
   56 |
   57 |         // Kiểm tra nội dung toast message đã bị xóa
   58 |         expect(await loginPage.isToastGone()).toBeTruthy();
   59 |     });
   60 |
   61 |     test('login button should be disabled when both email and password are empty', async ({ page }) => {
   62 |         // Verify login button is disabled
>  63 |         expect(await loginPage.isLoginButtonDisabled()).toBeTruthy();
      |                                                         ^ Error: expect(received).toBeTruthy()
   64 |     });
   65 |
   66 |
   67 |     test('login button should be disabled when email is empty', async ({ page }) => {
   68 |         // Enter only password
   69 |         await loginPage.enterPassword(TestData.Users.ValidUser.password);
   70 |
   71 |         // Verify login button is still disabled
   72 |         expect(await loginPage.isLoginButtonDisabled()).toBeTruthy();
   73 |
   74 |         await loginPage.focusEmailField();
   75 |
   76 |         await loginPage.blurEmailField();
   77 |
   78 |         // Verify error message for email is displayed (if your form shows errors before submission)
   79 |         expect(await loginPage.isErrorMessageDisplayed('Email is required')).toBeTruthy();
   80 |     });
   81 |
   82 |     test('login button should be disabled when password is empty', async ({ page }) => {
   83 |         // Enter only email
   84 |         await loginPage.enterEmail(TestData.Users.ValidUser.email);
   85 |
   86 |         // Verify login button is still disabled
   87 |         expect(await loginPage.isLoginButtonDisabled()).toBeTruthy();
   88 |
   89 |         await loginPage.focusPasswordField();
   90 |
   91 |         await loginPage.blurPasswordField();
   92 |
   93 |         // Verify error message for password is displayed (if your form shows errors before submission)
   94 |         expect(await loginPage.isErrorMessageDisplayed('Password is required')).toBeTruthy();
   95 |     });
   96 |
   97 |     test('login button should be disabled when email format is invalid', async ({ page }) => {
   98 |         // Enter invalid email format and valid password
   99 |         await loginPage.enterEmail((TestData.Users.InvalidUser.invalidFormatEmail));
  100 |         await loginPage.enterPassword(TestData.Users.ValidUser.password);
  101 |
  102 |         // Verify login button is disabled
  103 |         expect(await loginPage.isLoginButtonDisabled()).toBeTruthy();
  104 |
  105 |         // Verify error message for invalid email is displayed
  106 |         expect(await loginPage.isErrorMessageDisplayed('Email is invalid')).toBeTruthy();
  107 |     });
  108 |
  109 | });
  110 |
  111 |
```