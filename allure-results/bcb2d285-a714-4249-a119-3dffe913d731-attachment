# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Login Functionality >> should login successfully with valid credentials
- Location: E:\Playwright\tests\login\Login.spec.js:17:5

# Error details

```
Error: expect(received).toBeFalsy()

Received: true
    at E:\Playwright\tests\login\Login.spec.js:21:57
```

# Page snapshot

```yaml
- main:
  - heading "Trade for Good" [level=3]
  - paragraph: Financial Companies Empowered Through Technology
  - button "Read more":
    - link "Read more"
  - img "global"
  - text: Powered by
  - img "provider"
  - button "Language":
    - img "language_flag"
  - button "Theme"
  - heading "Hello!" [level=5]
  - paragraph: Please login to your account
  - text: Email
  - textbox "Email": minh.tfg@novus-fintech.com
  - text: Password
  - textbox "Password": Abc123456@
  - button "toggle password visibility"
  - paragraph
  - button "Login" [disabled]:
    - text: Login
    - progressbar:
      - img
  - paragraph:
    - text: For any questions, reach out to us at
    - link "hello@equix.app"
    - text: anytime!
```

# Test source

```ts
   1 | import { test, expect } from '@playwright/test';
   2 | import { TestData } from '../../lib/constants/TestData';
   3 | import PageFactory from '../../lib/pages/PageFactory';
   4 |
   5 |
   6 | test.describe('Login Functionality', () => {
   7 |     let loginPage;
   8 |     let pageFactory;
   9 |
   10 |     test.beforeEach(async ({ page }) => {
   11 |         pageFactory = new PageFactory(page);
   12 |         // Lấy LoginPage từ PageFactory
   13 |         loginPage = pageFactory.getLoginPage();
   14 |         await loginPage.open('https://portal-tradeforgood-dev2.equix.app');
   15 |     });
   16 |
   17 |     test('should login successfully with valid credentials', async ({ page }) => {
   18 |         await loginPage.login(TestData.Users.ValidUser.email, TestData.Users.ValidUser.password);
   19 |
   20 |         // Verify login button is enabled
>  21 |         expect(await loginPage.isLoginButtonDisabled()).toBeFalsy();
      |                                                         ^ Error: expect(received).toBeFalsy()
   22 |
   23 |         // Kiểm tra đã chuyển hướng đến trang nhập PIN
   24 |         await expect(page.locator('body')).toContainText('Enter Pin Code');
   25 |
   26 |         await loginPage.enterCode(TestData.Users.ValidUser.code);
   27 |
   28 |         await expect(page.locator('body')).toContainText('Dashboard');
   29 |     });
   30 |
   31 |     test('should show error message with invalid credentials', async ({ page }) => {
   32 |         await loginPage.login(TestData.Users.InvalidUser.email, TestData.Users.InvalidUser.password);
   33 |
   34 |         // Kiểm tra toast thông báo lỗi hiển thị
   35 |         expect(await loginPage.isToastDisplayed()).toBeTruthy();
   36 |
   37 |         // Kiểm tra nội dung của toast message
   38 |         expect(await loginPage.isToastMessageCorrect('Error, Incorrect Password or User Login. Please make sure your details are correct and try again')).toBeTruthy();
   39 |
   40 |         await loginPage.dismissToast();
   41 |
   42 |         expect(await loginPage.isToastGone()).toBeTruthy();
   43 |
   44 |         await loginPage.clickLoginButton();
   45 |
   46 |         expect(await loginPage.isToastDisplayed()).toBeTruthy();
   47 |
   48 |         expect(await loginPage.isToastMessageCorrect('Error, You have tried too many times. Please try again later.')).toBeTruthy();
   49 |
   50 |         await loginPage.dismissToast();
   51 |
   52 |         // Kiểm tra nội dung toast message đã bị xóa
   53 |         expect(await loginPage.isToastGone()).toBeTruthy();
   54 |     });
   55 |
   56 |     test('login button should be disabled when both email and password are empty', async ({ page }) => {
   57 |         // Verify login button is disabled
   58 |         expect(await loginPage.isLoginButtonDisabled()).toBeTruthy();
   59 |     });
   60 |
   61 |
   62 |     test('login button should be disabled when email is empty', async ({ page }) => {
   63 |         // Enter only password
   64 |         await loginPage.enterPassword(TestData.Users.ValidUser.password);
   65 |
   66 |         // Verify login button is still disabled
   67 |         expect(await loginPage.isLoginButtonDisabled()).toBeTruthy();
   68 |
   69 |         await loginPage.focusEmailField();
   70 |
   71 |         await loginPage.blurEmailField();
   72 |
   73 |         // Verify error message for email is displayed (if your form shows errors before submission)
   74 |         expect(await loginPage.isErrorMessageDisplayed('Email is required')).toBeTruthy();
   75 |     });
   76 |
   77 |     test('login button should be disabled when password is empty', async ({ page }) => {
   78 |         // Enter only email
   79 |         await loginPage.enterPassword(TestData.Users.ValidUser.email);
   80 |
   81 |         // Verify login button is still disabled
   82 |         expect(await loginPage.isLoginButtonDisabled()).toBeTruthy();
   83 |
   84 |         await loginPage.focusPasswordField();
   85 |
   86 |         await loginPage.blurPasswordField();
   87 |
   88 |         // Verify error message for password is displayed (if your form shows errors before submission)
   89 |         expect(await loginPage.isErrorMessageDisplayed('Password is required')).toBeTruthy();
   90 |     });
   91 |
   92 |     test('login button should be disabled when email format is invalid', async ({ page }) => {
   93 |         // Enter invalid email format and valid password
   94 |         await loginPage.enterEmail((TestData.Users.InvalidUser.invalidFormatEmail));
   95 |         await loginPage.enterPassword(TestData.Users.ValidUser.password);
   96 |
   97 |         // Verify login button is disabled
   98 |         expect(await loginPage.isLoginButtonDisabled()).toBeTruthy();
   99 |
  100 |         // Verify error message for invalid email is displayed
  101 |         expect(await loginPage.isErrorMessageDisplayed('Email is invalid')).toBeTruthy();
  102 |     });
  103 |
  104 | });
  105 |
  106 |
```